AWSTemplateFormatVersion: 2010-09-09

Parameters:

  BatchJobDoneQueueUrl:
    Type: String

  BatchJobStartQueueArn:
    Type: String

  BatchJobStartDefinitionArn:
    Type: String

  Environment:
    Type: String
    AllowedValues:
      - development
      - production
      - staging
      - testing

  ImageBucketName:
    Type: String

  ImageBucketUrl:
    Type: String

  LoadBalancerListenerArn:
    Type: String

  LoadBalancerSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id

  RedisClusterEndpoint:
    Type: String

  RedisClusterSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

  VpcId:
    Type: AWS::EC2::VPC::Id


Mappings:

  ServiceParams:
    production:
      Cpu: 1024
      Memory: 2048
      Count: 1
      CountMin: 1
      CountMax: 10
      DockerImage: nginx
      ContainerPort: 80


Resources:

  EcsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::Region}-${Environment}-style-transfer-ecs-v1
      Path: !Sub /${AWS::Region}/${Environment}/style-transfer/
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::Region}-${Environment}-style-transfer-ecs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AttachNetworkInterface
                  - ec2:CreateNetworkInterface
                  - ec2:CreateNetworkInterfacePermission
                  - ec2:DeleteNetworkInterface
                  - ec2:DeleteNetworkInterfacePermission
                  - ec2:Describe*
                  - ec2:DetachNetworkInterface
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:RegisterTargets
                Resource: '*'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      Matcher:
        HttpCode: 200
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub ${Environment}-style-transfer-server
      Port: !FindInMap [ServiceParams, !Ref Environment, ContainerPort]
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      VpcId: !Ref VpcId

  HttpListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - '*'
      ListenerArn: !Ref LoadBalancerListenerArn
      Priority: 1

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${Environment}-style-transfer-server

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::Region}-${Environment}-style-transfer-server-execution-v1
      Path: !Sub /${AWS::Region}/${Environment}/style-transfer/server/
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::Region}-${Environment}-style-transfer-server-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::Region}-${Environment}-style-transfer-server-task-v1
      Path: !Sub /${AWS::Region}/${Environment}/style-transfer/server/
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::Region}-${Environment}-style-transfer-server-task
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${ImageBucketName}/private/input/*
                  - !Sub arn:aws:s3:::${ImageBucketName}/public/input/*
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ImageBucketName}
              - Effect: Allow
                Action: batch:SubmitJob
                Resource:
                  - !Ref BatchJobStartQueueArn
                  - !Ref BatchJobStartDefinitionArn

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Environment}-style-transfer-server-v1
      Cpu: !FindInMap [ServiceParams, !Ref Environment, Cpu]
      Memory: !FindInMap [ServiceParams, !Ref Environment, Memory]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub ${Environment}-style-transfer-server
          Cpu: !FindInMap [ServiceParams, !Ref Environment, Cpu]
          Memory: !FindInMap [ServiceParams, !Ref Environment, Memory]
          Image: !FindInMap [ServiceParams, !Ref Environment, DockerImage]
          Environment:
            - Name: BATCH_JOB_DONE_QUEUE_URL
              Value: !Ref BatchJobDoneQueueUrl
            - Name: BATCH_JOB_START_DEFINITION
              Value: !Ref BatchJobStartDefinitionArn
            - Name: BATCH_JOB_START_QUEUE_ARN
              Value: !Ref BatchJobStartQueueArn
            - Name: IMAGE_BUCKET_NAME
              Value: !Ref ImageBucketName
            - Name: IMAGE_BUCKET_URL
              Value: !Ref ImageBucketUrl
            - Name: REDIS_CLUSTER_ENDPOINT
              Value: !Ref RedisClusterEndpoint
          PortMappings:
            - ContainerPort: !FindInMap [ServiceParams, !Ref Environment, ContainerPort]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: server

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${Environment}-style-transfer

  EcsServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${Environment}-style-transfer-server
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-style-transfer-server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !FindInMap [ServiceParams, !Ref Environment, ContainerPort]
          ToPort: !FindInMap [ServiceParams, !Ref Environment, ContainerPort]
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroupId

  EcsServiceRedisIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from server cluster containers
      GroupId: !Ref RedisClusterSecurityGroupId
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      SourceSecurityGroupId: !Ref EcsServiceSecurityGroup

  EcsService:
    Type: AWS::ECS::Service
    DependsOn: HttpListenerRule
    Properties:
      ServiceName: !Sub ${Environment}-style-transfer-server
      Cluster: !Ref EcsCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !FindInMap [ServiceParams, !Ref Environment, Count]
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsServiceSecurityGroup
          Subnets: !Ref SubnetIds
      TaskDefinition: !Ref EcsTaskDefinition
      LoadBalancers:
        - ContainerName: !Sub ${Environment}-style-transfer-server
          ContainerPort: !FindInMap [ServiceParams, !Ref Environment, ContainerPort]
          TargetGroupArn: !Ref TargetGroup

  Autoscaling:
    Type: AWS::CloudFormation::Stack
    DependsOn: EcsService
    Properties:
      TemplateURL: ../partials/server-autoscaling.yml
      Parameters:
        ClusterName: !Ref EcsCluster
        Environment: !Ref Environment
        MaxCapacity: !FindInMap [ServiceParams, !Ref Environment, CountMax]
        MinCapacity: !FindInMap [ServiceParams, !Ref Environment, CountMin]
        ServiceName: !Sub ${Environment}-style-transfer-server
