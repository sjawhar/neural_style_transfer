AWSTemplateFormatVersion: 2010-09-09

Parameters:

  Environment:
    Type: String
    AllowedValues:
      - development
      - production
      - staging
      - testing


Mappings:

  CidrBlocks:
    production:
      Vpc: 10.0.0.0/16
      PublicSubnetOne: 10.0.0.0/24
      PublicSubnetTwo: 10.0.1.0/24
      PrivateSubnetOne: 10.0.10.0/24
      PrivateSubnetTwo: 10.0.11.0/24


Resources:

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [CidrBlocks, !Ref Environment, Vpc]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-style-transfer

  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [CidrBlocks, !Ref Environment, PublicSubnetOne]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-style-transfer-public-one

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [CidrBlocks, !Ref Environment, PublicSubnetTwo]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-style-transfer-public-two

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-style-transfer-public

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [CidrBlocks, !Ref Environment, PublicSubnetOne]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-style-transfer-public-one

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [CidrBlocks, !Ref Environment, PublicSubnetTwo]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-style-transfer-public-two

  PublicSubnetOneEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicSubnetTwoEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicSubnetOneNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnetOneEip.AllocationId
      SubnetId: !Ref PublicSubnetOne
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-style-transfer-one

  PublicSubnetTwoNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnetTwoEip.AllocationId
      SubnetId: !Ref PublicSubnetTwo
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-style-transfer-two

  NatRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-style-transfer-nat-one

  NatRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-style-transfer-nat-two

  NatDefaultRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnetOneNatGateway

  NatDefaultRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnetTwoNatGateway

  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetOne
      RouteTableId: !Ref NatRouteTableOne

  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetTwo
      RouteTableId: !Ref NatRouteTableTwo

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [CidrBlocks, !Ref Environment, PrivateSubnetOne]
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-style-transfer-private-one

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [CidrBlocks, !Ref Environment, PrivateSubnetTwo]
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-style-transfer-private-two


Outputs:

  PrivateSubnetIds:
    Value: !Join [',', [!Ref PrivateSubnetOne, !Ref PrivateSubnetTwo]]

  PublicSubnetIds:
    Value: !Join [',', [!Ref PublicSubnetOne, !Ref PublicSubnetTwo]]

  VpcId:
    Value: !Ref Vpc
